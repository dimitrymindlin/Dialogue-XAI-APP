# ExplainBot Params
ExplainBot.model_file_path = "./data/diabetes/diabetes_model_rf.pkl"
ExplainBot.encoded_col_mapping_path = "./data/diabetes/encoded_col_mapping.json"
ExplainBot.categorical_mapping_path = "./data/diabetes/categorical_mapping.json"
ExplainBot.background_dataset_file_path = "./data/diabetes/diabetes_train.csv"
ExplainBot.dataset_file_path = "./data/diabetes/diabetes_test.csv"

ExplainBot.name = "diabetes"

# Dataset feature information

ExplainBot.dataset_index_column = 0
ExplainBot.instance_type_naming = "patient"
ExplainBot.target_variable_name = "Y"
ExplainBot.categorical_features = ['BloodGroup']
ExplainBot.numerical_features = ['Age', 'Pregnancies', 'Glucose', 'BloodPressure', 'Insulin', 'BodyMassIndex', 'DiabetesPedigreeFunction']
ExplainBot.remove_underscores = True
ExplainBot.ordinary_features = None
ExplainBot.actionable_features = ['Glucose', 'BloodPressure', 'Insulin', 'BodyMassIndex', 'DiabetesPedigreeFunction']
ExplainBot.feature_ordering = ['Age', 'BloodGroup', 'Pregnancies', 'Glucose', 'BloodPressure', 'Insulin', 'BodyMassIndex', 'DiabetesPedigreeFunction']
ExplainBot.use_intent_recognition = openAI

# Explanation Params
Explanation.max_cache_size = 1_000_000

# MegaExplainer Params
MegaExplainer.cache_location = "./cache/diabetes-mega-explainer-tabular.pkl"
MegaExplainer.use_selection = False

# Tabular Dice Params
TabularDice.cache_location = "./cache/diabetes-dice-tabular.pkl"
TabularDice.final_cfe_amount = 3

# Tabular Anchor Params
TabularAnchor.cache_location = "./cache/diabetes-anchor-tabular.pkl"

# Diverse Instances
DiverseInstances.cache_location = "./cache/diabetes-diverse-instances.pkl"
DiverseInstances.instance_amount = 10
DiverseInstances.dataset_name = "diabetes"

# Test Instances
TestInstances.cache_location = "./cache/diabetes-test-instances.pkl"
TestInstances.max_features_to_vary = 2

# Ceteris Paribus
CeterisParibus.cache_location = "./cache/diabetes-ceteris-paribus.pkl"

# Conversation params
Conversation.class_names = {0: "unlikely to have diabetes", 1: "likely to have diabetes"}
Conversation.question_bank_path =  "./data/question_bank.csv"

# Dataset description
DatasetDescription.dataset_objective = "predict whether someone has diabetes"
DatasetDescription.user_study_objective = "whether a person has diabetes"
DatasetDescription.dataset_description = "diabetes prediction"
DatasetDescription.model_description = "gradient boosted tree"

# Feature Tooltip
ExplainBot.feature_tooltip_mapping = {
    "age": "The person's age.",
    "pregnancies": "Number of times pregnant.",
    "glucose": "Plasma glucose concentration after 2 hours in an oral glucose tolerance test.",
    "bloodpressure": "Diastolic blood pressure.",
    "skinthickness": "Triceps skin fold thickness. ",
    "insulin": "The amount of insulin in the blood two hours after eating.",
    "bodymassindex": "Body mass index is a number calculated from weight and height, used to assess if a person's weight is in a healthy range.",
    "diabetespedigreefunction": "A score that represents the likelihood of diabetes based on family history.",
}

# Feature Units
ExplainBot.feature_units_mapping = {
    "age": "years",
    "pregnancies": "times",
    "glucose": "mg/dL",
    "bloodpressure": "mm Hg",
    "skinthickness": "mm",
    "insulin": "mu U/ml",
    "bodymassindex": "kg/m^2",
    "diabetespedigreefunction": "score",
}